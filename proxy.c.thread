/* It is the file which I hand in to my TA but it has nothing
   to do with pmp. */
/*
 * proxy.c - CS:APP Web proxy
 *
 * TEAM MEMBERS:
 *     Andrew Carnegie, ac00@cs.cmu.edu 
 *     Harry Q. Bovik, bovik@cs.cmu.edu
 * 
 * spawn one thread for one response.
 * no IO multiplex, no thread pool, truly poor man's proxy
 * 
 */ 

#define _GNU_SOURCE
#include <string.h>
#include <stdlib.h>
#include <stdio.h>
#include <signal.h>
#include <sys/socket.h>
#include <sys/time.h>
#include <sys/epoll.h>
#include <netinet/in.h>
#include <time.h>
#include <stdlib.h>
#include <arpa/inet.h>
#include <unistd.h>
#include <netdb.h>
#include <errno.h>
#include <fcntl.h>
#include <pthread.h>

#define MAXLINE 8192
#define LISTENQ 1024

int stop = 0;

void sig_int(int signal) {
  puts("shutting down");
  stop = 1;
}

/*
 * Function prototypes
 */
int parse_uri(char *uri, char *target_addr, char *path, int  *port);
void format_log_entry(char *logstring, struct sockaddr_in *sockaddr, char *uri, int size);
void *thread(void *arg);

/* The thread is the middle man between client and server.
 * It generally peeks client's data, oh I'm sorry, and then
 * forward it as-is.
 */
void *thread(void *arg) {

  pthread_detach(pthread_self());
  int connfd = *(int *)arg;
  char buf[MAXLINE];
  char logstring[256];
  int n;
  char *rp = buf;
  char method[10], uri[MAXLINE], version[10];
  do {
    n = read(connfd, rp, MAXLINE);
    if (n < 0) {
      perror("read");
      return NULL;
    }
    rp += n;
  } while (sscanf(buf, "%s %s %s", method, uri, version) != 3);
  //while (read(connfd, buf, MAXLINE) > 0);
  char hostname[MAXLINE];
  char pathname[MAXLINE];
  int port;

  if (strcasecmp(method, "GET")) {
    return NULL;
  }


  if (parse_uri(uri, hostname, pathname, &port) < 0) {
    return NULL;
  }

  struct hostent *hp = gethostbyname(hostname);
  if (hp == NULL) {
    return NULL;
  }

  struct sockaddr_in serveraddr = {
    .sin_family = AF_INET,
    .sin_addr.s_addr = 0,
    .sin_port = htons(port)
  };
  bcopy((char *)hp->h_addr_list[0],
        (char *)&serveraddr.sin_addr.s_addr,
        hp->h_length);

  int clientfd = socket(AF_INET, SOCK_STREAM, 0);

  if (connect(clientfd, (struct sockaddr *)&serveraddr,
              sizeof(serveraddr)) < 0) {
    perror("connect to server");
    goto cloclientfd;
  }
  sprintf(buf, "GET %s HTTP/1.0\r\n\n", uri);
  int size = strlen(buf);
  rp = buf;
  do {
    n = write(clientfd, rp, size);
    rp += n;
    size -= n;
  } while (size > 0);

  size = 0;
  while ((n = read(clientfd, buf, MAXLINE)) > 0) {
    //printf("forwarded %d bytes\n", n);
    rp = buf;
    do {
      int m = write(connfd, rp, n);
      rp += m;
      size += m;
    } while (size < n);
  }
  format_log_entry(logstring, &serveraddr, uri, size);
  puts(logstring);


 cloclientfd:
  if (close(clientfd) < 0) {
    perror("close");
  }

  return NULL;
}


/*
 * main - Main routine for the proxy program 
 */
int main(int argc, char **argv)
{
  int ret;
  struct sockaddr_in addr = {
    .sin_family = AF_INET,
    .sin_addr.s_addr = htonl(INADDR_ANY),
    .sin_port = htons(atoi(argv[1]))
  };
  /* Check arguments */
  if (argc != 2) {
    fprintf(stderr, "Usage: %s <port number>\n", argv[0]);
    exit(EXIT_FAILURE);
  }

  //signal(SIGINT, sig_int);

  int listenfd = socket(AF_INET, SOCK_STREAM, 0);
  if (listenfd < 0) {
    perror("socket");
  }

  int optval = 1;
  if (setsockopt(listenfd, SOL_SOCKET, SO_REUSEADDR,
                 (const void *)&optval, sizeof(int)) < 0) {
    perror("setsockopt");
  }

  if (bind(listenfd, (struct sockaddr *)&addr, sizeof(addr)) < 0) {
    perror("bind");
    goto clolistenfd;
  }

  if (listen(listenfd, LISTENQ) < 0) {
    perror("listen");
    goto clolistenfd;
  }

  int *connfd;
  pthread_t tid;

  while (!stop) {
    connfd = (int *) malloc(sizeof(int));
    *connfd = accept(listenfd, NULL, NULL);
    if (*connfd < 0) {
      perror("accept");
      goto cloconnfd;
    }
    pthread_create(&tid, NULL, thread, connfd);
  }

  exit(EXIT_SUCCESS);
  /* resource handling */
 cloconnfd:
  ret = close(*connfd);
  if (ret < 0) {
    perror("close");
  }
 clolistenfd:
  ret = close(listenfd);
  if (ret < 0) {
    perror("close");
  }
  exit(EXIT_FAILURE);
}



/*
 * parse_uri - URI parser
 *
 * Given a URI from an HTTP proxy GET request (i.e., a URL), extract
 * the host name, path name, and port.  The memory for hostname and
 * pathname must already be allocated and should be at least MAXLINE
 * bytes. Return -1 if there are any problems.
 */
int parse_uri(char *uri, char *hostname, char *pathname, int *port)
{
  char *hostbegin;
  char *hostend;
  char *pathbegin;
  int len;

  if (strncasecmp(uri, "http://", 7) != 0) {
    hostname[0] = '\0';
    return -1;
  }
       
  /* Extract the host name */
  hostbegin = uri + 7;
  hostend = strpbrk(hostbegin, " :/\r\n\0");
  len = hostend - hostbegin;
  strncpy(hostname, hostbegin, len);
  hostname[len] = '\0';
    
  /* Extract the port number */
  *port = 80; /* default */
  if (*hostend == ':')   
    *port = atoi(hostend + 1);
    
  /* Extract the path */
  pathbegin = strchr(hostbegin, '/');
  if (pathbegin == NULL) {
    pathname[0] = '\0';
  }
  else {
    pathbegin++;	
    strcpy(pathname, pathbegin);
  }

  return 0;
} /*
   * format_log_entry - Create a formatted log entry in logstring. 
   * 
   * The inputs are the socket address of the requesting client
   * (sockaddr), the URI from the request (uri), and the size in bytes
   * of the response from the server (size).
   */
void format_log_entry(char *logstring, struct sockaddr_in *sockaddr, 
                      char *uri, int size)
{
  time_t now;
  char time_str[MAXLINE];
  unsigned long host;
  unsigned char a, b, c, d;

  /* Get a formatted time string */
  now = time(NULL);
  strftime(time_str, MAXLINE, "%a %d %b %Y %H:%M:%S %Z", localtime(&now));

  /* 
   * Convert the IP address in network byte order to dotted decimal
   * form. Note that we could have used inet_ntoa, but chose not to
   * because inet_ntoa is a Class 3 thread unsafe function that
   * returns a pointer to a static variable (Ch 13, CS:APP).
   */
  host = ntohl(sockaddr->sin_addr.s_addr);
  a = host >> 24;
  b = (host >> 16) & 0xff;
  c = (host >> 8) & 0xff;
  d = host & 0xff;


  /* Return the formatted log entry string */
  sprintf(logstring, "%s: %d.%d.%d.%d %s %d", time_str, a, b, c, d, uri, size);
}
